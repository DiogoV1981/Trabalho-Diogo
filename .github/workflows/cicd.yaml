name: Pipeline CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

jobs:
  cicd:

    runs-on: ubuntu-latest

    steps:
      - name: Obter repositório
        uses: actions/checkout@v3

      - name: Configurar Git LFS e recuperar arquivos corretamente
        run: |
          git lfs install
          git lfs pull
          git lfs fetch
          git lfs checkout

      - name: Configurar Docker
        uses: docker/setup-buildx-action@v2

      - name: Iniciar serviços
        run: docker compose up -d

      - name: Esperar inicialização dos serviços
        run: sleep 20

      - name: Verificar containers ativos antes dos testes
        run: docker ps -a

      - name: Testar acesso à FastAPI antes dos testes
        run: curl --fail http://localhost:5003/docs || exit 1

      - name: Testar acesso ao MLflow usando localhost
        run: curl --fail http://localhost:5000 || exit 1

      - name: Criar ambiente para executar testes com o conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          environment-file: conda.yaml
          activate-environment: OML

      - name: Validar dependências instaladas no CI/CD
        run: conda run --no-capture-output -n OML pip freeze | grep -E 'mlflow|cloudpickle|numpy|pandas|psutil|scikit-learn|scipy'

      - name: Atualizar dependências no CI/CD para corresponder ao modelo
        run: |
          conda run --no-capture-output -n OML pip install --force \
            mlflow==2.20.3 cloudpickle==3.1.1 numpy==2.0.1 pandas==2.2.3 \
            psutil==5.9.0 scikit-learn==1.6.1 scipy==1.15.1

      - name: Verificar tamanho do arquivo no CI/CD
        run: conda run --no-capture-output -n OML ls -lh mlruns/870553150525548120/dc4c59d0a68a4c36b77c252d92f002d2/artifacts/random_forest_v2/model.pkl

      - name: Inspecionar conteúdo do modelo antes do carregamento
        run: conda run --no-capture-output -n OML python -c "import pickle; f = open('mlruns/870553150525548120/dc4c59d0a68a4c36b77c252d92f002d2/artifacts/random_forest_v2/model.pkl', 'rb'); print(f.read(100))"

      - name: Testar carregamento do modelo pelo diretório correto
        run: conda run --no-capture-output -n OML python -c "import mlflow; mlflow.set_tracking_uri('http://localhost:5000'); model = mlflow.sklearn.load_model('mlruns/870553150525548120/dc4c59d0a68a4c36b77c252d92f002d2/artifacts/random_forest_v2/'); print(model)"     
      
      - name: Executar testes
        run: conda run --no-capture-output -n OML pytest

      - name: Iniciar sessão no repositório do GitHub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Enviar imagem MLflow Tracking para o repositório do GitHub
        run: docker push ghcr.io/diogov1981/mlflow-tracking:latest

      - name: Enviar imagem FastAPI para o repositório do GitHub
        run: docker push ghcr.io/diogov1981/fastapi-application:latest