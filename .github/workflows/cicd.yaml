name: Pipeline CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

jobs:
  cicd:

    runs-on: ubuntu-latest

    steps:
      - name: Obter repositório
        uses: actions/checkout@v3

      - name: Configurar Docker
        uses: docker/setup-buildx-action@v2

      - name: Iniciar serviços
        run: docker compose up -d

      - name: Esperar inicialização dos serviços
        run: sleep 20

      - name: Verificar containers ativos antes dos testes
        run: docker ps -a

      - name: Testar acesso à FastAPI antes dos testes
        run: curl --fail http://localhost:5003/docs || exit 1

      - name: Testar acesso ao MLflow usando localhost
        run: curl --fail http://localhost:5000 || exit 1

      - name: Criar ambiente para executar testes com o conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          environment-file: conda.yaml
          activate-environment: OML2

      - name: Validar dependências instaladas no CI/CD
        run: conda run --no-capture-output -n OML2 pip freeze | grep -E 'mlflow|cloudpickle|numpy|pandas|psutil|scikit-learn|scipy'

      - name: Atualizar dependências no CI/CD para corresponder ao modelo
        run: |
          conda run --no-capture-output -n OML2 pip install --force \
            mlflow==2.20.3 cloudpickle==3.1.1 numpy==2.0.1 pandas==2.2.3 \
            psutil==5.9.0 scikit-learn==1.6.1 scipy==1.15.1

      - name: Verificar versão do MLflow e `cloudpickle` no CI/CD
        run: conda run --no-capture-output -n OML2 pip freeze | grep -E 'mlflow|cloudpickle'

      - name: Definir caminho correto dos artefatos
        run: |
          ARTIFACT_PATH=$(conda run --no-capture-output -n OML2 python -c "import mlflow; mlflow.set_tracking_uri('http://localhost:5000'); client = mlflow.tracking.MlflowClient(); run_id = 'dc4c59d0a68a4c36b77c252d92f002d2'; artifacts = client.download_artifacts(run_id, 'random_forest_v2'); print(artifacts)")
          echo "ARTIFACT_PATH=$ARTIFACT_PATH" >> $GITHUB_ENV

      - name: Verificar `ARTIFACT_PATH`
        run: conda run --no-capture-output -n OML2 echo $ARTIFACT_PATH

      - name: Verificar se os artefatos do modelo estão presentes no CI/CD
        run: conda run --no-capture-output -n OML2 python -c "import os; model_dir = os.getenv('ARTIFACT_PATH'); print(os.listdir(model_dir))"

      - name: Testar carregamento do modelo no CI/CD com `pyfunc`
        run: conda run --no-capture-output -n OML2 python -c "import mlflow; import os; model_path = os.getenv('ARTIFACT_PATH'); model = mlflow.pyfunc.load_model(model_path); print(model)" 
      
      - name: Executar testes
        run: conda run --no-capture-output -n OML2 pytest

      - name: Iniciar sessão no repositório do GitHub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Enviar imagem MLflow Tracking para o repositório do GitHub
        run: docker push ghcr.io/diogov1981/mlflow-tracking:latest

      - name: Enviar imagem FastAPI para o repositório do GitHub
        run: docker push ghcr.io/diogov1981/fastapi-application:latest